ËÅ«bmsg.txt`µ'épublic ArrayList<RingOutput> showPrivateKeyRingCollection()
	{
		try {
			ArrayList<RingOutput> ret = new ArrayList<>();
			PGPSecretKeyRingCollection coll = getSecretKeyRingCollection();
			Iterator<PGPSecretKeyRing> iterator = coll.getKeyRings();
			
			while(iterator.hasNext())
			{
				PGPSecretKeyRing ring = iterator.next();
				PGPPublicKey publ = ring.getPublicKey();
				if(publ == null)
				{
					System.out.println("NUll");
				}
				PGPPublicKey publicKey = ring.getPublicKey();
				
				Date dateUntil = new Date(System.currentTimeMillis() + 1000*publicKey.getValidSeconds());
				long keyID = publicKey.getKeyID();
				Date creationTime = publicKey.getCreationTime();
				byte[] fingerPrint = publicKey.getFingerprint();
				String userID = publicKey.getUserIDs().next();
				int first = userID.indexOf('<');
				int second = userID.indexOf('>');
				String name = userID.substring(0, first - 1);
				String email = userID.substring(first + 1, second);
				DateFormat f = new SimpleDateFormat("YYYY-MM");
				//System.out.println(name+" "+email+" "+keyID+" "+f.format(creationTime) + " "+ f.format(dateUntil) +" "+fingerPrint);
				
				RingOutput r = new RingOutput();
				r.setEmail(email);
				r.setFingerPrint(fingerPrint);
				r.setKeyID(keyID);
				r.setName(name);
				r.setValidFrom(creationTime);
				r.setValidUntil(dateUntil);
				ret.add(r);
			}
			
			return ret;
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} catch (PGPException e) {
			e.printStackTrace();
		}
		return null;
	}